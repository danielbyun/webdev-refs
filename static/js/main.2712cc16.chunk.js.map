{"version":3,"sources":["Components/CounterButton/CounterButton.js","Components/Header/Header.js","Components/ErrorBoundary/ErrorBoundry.js","Components/SearchBox/SearchBox.js","Components/Scroll/Scroll.js","Components/Card/Card.js","Components/CardList/CardList.js","Components/MainPage/MainPage.js","App.js","Redux/actions.js","Redux/constants.js","Components/Api/api.js","registerServiceWorker.js","Redux/reducers.js","index.js"],"names":["CounterButton","props","state","count","nextProps","nextState","this","id","color","onClick","setState","Component","memo","className","ErrorBoundary","hasError","error","info","console","log","children","SearchBox","onSearchChange","type","placeholder","onChange","e","Scroll","style","overflow","border","height","Card","robot","name","email","alt","src","CardList","robots","undefined","map","key","MainPage","searchField","isPending","onRequestRobots","useEffect","filter","toLowerCase","includes","App","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","a","link","fetch","then","response","json","catch","err","data","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","success","logger","createLogger","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2712cc16.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass CounterButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    return (\n      <button\n        id=\"counter\"\n        color={this.props.color}\n        onClick={() => this.setState(state => ({ count: state.count + 1 }))}\n      >\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { memo } from \"react\";\nimport CounterButton from \"../CounterButton/CounterButton\";\n\n// In most cases, instead of writing shouldComponentUpdate()\n// by hand, you can inherit from React.PureComponent. It is\n// equivalent to implementing shouldComponentUpdate() with a\n// shallow comparison of current and previous props and state.\n\nconst Header = () => {\n  return (\n    <div>\n      <h1 className=\"f1\">RoboFriends</h1>\n      <CounterButton />\n    </div>\n  );\n};\n\nexport default memo(Header);\n","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n  constructor (props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  componentDidCatch (error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render () {\n    console.log('ErrorBoundary');\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React from \"react\";\n\nimport \"./SearchBox.css\";\n\nconst SearchBox = props => {\n  const { onSearchChange } = props;\n  return (\n    <input\n      className=\"search-box\"\n      type=\"search\"\n      placeholder=\"search monsters\"\n      onChange={e => onSearchChange(e)}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{ overflow: \"scroll\", border: \"5px solid black\", height: \"800px\" }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from \"react\";\n\nimport \"./Card.css\";\n\nconst Card = props => {\n  const { robot } = props;\n  const { name, email, id } = robot;\n\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"robot\"\n        src={`https://robohash.org/${id}?set=set2&size=180x180`}\n      />\n      <h2> {name} </h2>\n      <p> {email} </p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { Fragment } from \"react\";\n\nimport Card from \"../Card/Card\";\nimport \"./CardList.css\";\n\nconst CardList = props => {\n  const { robots } = props;\n  return (\n    <Fragment>\n      {robots !== undefined && (\n        <div className=\"card-list\">\n          {robots.map(robot => (\n            <Card key={robot.id} robot={robot} />\n          ))}\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nexport default CardList;\n","import React, { useEffect } from \"react\";\n\nimport \"../../../src/App.css\";\n\nimport Header from \"../Header/Header\";\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundry\";\nimport SearchBox from \"../SearchBox/SearchBox\";\nimport Scroll from \"../Scroll/Scroll\";\nimport CardList from \"../CardList/CardList\";\n\nconst MainPage = ({\n  robots,\n  searchField,\n  isPending,\n  onRequestRobots,\n  onSearchChange,\n}) => {\n  useEffect(() => {\n    onRequestRobots();\n  }, [onRequestRobots]);\n\n  const filterRobots = () => {\n    return robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n  };\n\n  return (\n    <div className=\"tc\">\n      <Header />\n      <SearchBox onSearchChange={(e) => onSearchChange(e)} />\n      <Scroll>\n        {isPending ? (\n          <h1>Loading</h1>\n        ) : (\n          <ErrorBoundary>\n            <CardList robots={filterRobots()} />\n          </ErrorBoundary>\n        )}\n      </Scroll>\n    </div>\n  );\n};\n\nexport default MainPage;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { setSearchField, requestRobots } from \"./Redux/actions\";\n\nimport MainPage from \"./Components/MainPage/MainPage\";\n\nimport \"./App.css\";\n\nconst mapStateToProps = (state) => {\n  const { searchRobots, requestRobots } = state;\n  return {\n    searchField: searchRobots.searchField,\n    robots: requestRobots.robots,\n    isPending: requestRobots.isPending,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => {\n      dispatch(setSearchField(event.target.value));\n    },\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  render() {\n    return <MainPage {...this.props} />;\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { apiCall } from \"../Components/Api/api\";\nimport {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text\n});\n\nexport const requestRobots = () => async dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  await apiCall(\"https://jsonplaceholder.typicode.com/users\")\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","export const apiCall = (link) =>\n  fetch(link)\n    .then((response) => response.json())\n    .catch((err) => err.json());\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return {\n        ...state,\n        searchField: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: false,\n  success: false,\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return {\n        ...state,\n        isPending: true,\n      };\n    case REQUEST_ROBOTS_SUCCESS:\n      return {\n        ...state,\n        robots: action.payload,\n        success: true,\n        isPending: false,\n      };\n    case REQUEST_ROBOTS_FAILED:\n      return {\n        ...state,\n        isPending: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport \"tachyons\";\n\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { requestRobots, searchRobots } from \"./Redux/reducers\";\n\nimport \"./index.css\";\n\nconst logger = createLogger();\n\nconst rootReducers = combineReducers({ requestRobots, searchRobots });\n\nconst store = createStore(\n  rootReducers,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}